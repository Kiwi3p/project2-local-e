
<div class="profile-container">
    <section class="profile-information dark-background">
          <article class="container profile-info map">
            <div class="map-search">
              <button class="favorites-btn" type="submit" onclick="listAllFavorites()">Favorites</button>
              <form action="/profile">
              <button class="neighborhood-btn" type="submit">Neighborhood</button>
              </form>
              <label class="move-input">
                <input type="text" name="customLocation" id="customLocation" placeholder="Enter location" required>
              </label>
              <button class="search-button" onclick="searchLocation()">Search</button>
            <button class="location-btn" onclick="getCurrentLocation()">My Location</button>
            </div>
            <div id="map"></div>
          </article>
          <article class="container profile-info markets">
            <div class="scroll-fixed">
            <h3 class="fav-list-header" id="fav-list-header">Farmers Markets</h3>
            </div>
            <div style="{ overflow: scroll; display: block; }" id="list-markets"></div>
          </article>
    </section>
</div>
{{!--Object from Back End --}}
<input type="hidden" id="storeLocationInput" value={{thisLocation}}>
{{!-- Array from BAck End  ""--}}
<input type="hidden" id="favoritesArray" value="{{favorites}}">

<script>

//ONLOAD 
let markets;
  let map;
  //onload markers Array
  let firstMarkers = [];
  //get params on URL from BAKEND call
  const urlParams = new URLSearchParams(window.location.search);
  //Searches all // gets onlyteh one we tell it to GET
  const showOnlyFavorites = urlParams.get('showOnlyFavorites');

  function initMap() {
    let savedLocation = JSON.parse(document.getElementById('storeLocationInput').value);
    map = new google.maps.Map(document.getElementById("map"), {
      zoom: 13,
      center: savedLocation
    });

    if (!showOnlyFavorites) {
     searchPlaces(savedLocation);
    }
  } 

  function searchPlaces(keyword) {
      let request = {
        location: keyword,
        query: ['market', 'bio'],
        fields: ['photos'],
      }
      let service = new google.maps.places.PlacesService(map);
      service.textSearch(request, (results, status) => {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          for (let i = 0; i < results.length; i++) {
            let data = results;
            markets = results;
            console.log(results)
            let photoArray = results[0].photos[0];
            let image = (results[i].photos !== undefined) ?
                        (results[i].photos[0].getUrl({'maxWidth': 100, 'maxHeight': 100})) :
                        '/images/losticon.png';
            let name = results[i].name;
            let address = results[i].formatted_address;
            let place_id = results[i].place_id;
            let rating = results[i].rating;
           let lat = results[i].geometry.location.lat();
           let lng = results[i].geometry.location.lng();
            setMarker({ lat, lng }, name, address, place_id, rating, lat, lng);
            clearDivs();
            listAllLocation(name, address, place_id, rating, lat, lng, image);
          }         
        }
      });
     }

  function setMarker(marker, name, address, place_id, rating, lat, lng) {
   let favoritesArray = JSON.parse(document.getElementById('favoritesArray').value);
 
    let text = `<button type='submit' class="submit btn-fav">Add to favorites</button>`
    //filter if favorite
    for(let i = 0; i<favoritesArray.length;i++) {
      if (favoritesArray[i].id === place_id) {
        text = `<span style="margin: 0px 25%;">Already a favorite! <img style="width:20px;" src="images/favicon.png"></span>`
        break;
      }
    }

    //Markers
    let customMarker = new google.maps.Marker({
      position: marker,
      map: map
    });
    firstMarkers.push(customMarker);
    
    //pop up window
    let markerAttributes =`${name}<br/> 
    ${address}<br/>
    Rating: ${rating}/5
    <form action='/favorites/create' method='POST'>
      <input type='hidden' name='name' value='${name}' >
      <input type='hidden' name='address' value='${address}' >
      <input type='hidden' name='place_id' value='${place_id}' >
      <input type='hidden' name='rating' value='${rating}' >
      <input type='hidden' name='lat' value='${lat}' >
      <input type='hidden' name='lng' value='${lng}' >
      ${text}</form><button type='submit' class="submit btn-fav" onclick="calcRoute(${lat}, ${lng})">Get there</button>
      `;
    const infowindow = new google.maps.InfoWindow({
      content: markerAttributes,
    });
    
    customMarker.addListener("click", () => {
      //console.log(markerAttributes)
      infowindow.open(map, customMarker);
      highlightOnList(place_id);
    });
  }


function highlightOnList(place_id) {
  //console.log(place_id)
  //console.log(`markets`, markets);

  for (let i = 0; i < markets.length; i++) {
        if (markets[i].place_id === place_id) {
     document.getElementById(place_id).parentNode.parentNode.style.background = '#F2F2F2';

        } else {
//slide // shift 
        }
      }


}




  // SHOW SEARCH LIST 
  let results = '';
  function listAllLocation(name, address, place_id, rating, lat, lng, image) {
          let favoritesArray = JSON.parse(document.getElementById('favoritesArray').value);
 
          let text = `<button type='submit' class="submit btn-fav">Add to favorites</button>`
          //filter if favorite
          for(let i = 0; i<favoritesArray.length;i++) {
            if (favoritesArray[i].id === place_id) {
              text = `<div class="fav-switch" style="margin: 0px 17%;">Already a favorite! <img style="width:15px;" src="images/favicon.png"></div>`
              break;
            }
          }
          results+= `
          <div class="each">
          <div class="market-info" id="market-info">
              <span class="market-image"><img src="${image}" /></span>
              <div class="market-des">
              <div id='${place_id}' class="market-name">Market: ${name}</div>
              <div class="market-address">Address: ${address}</div>
              <div class="market-rating">Rating: ${rating}/5</div>
              
              
              </div>
              
          </div>
          <form action='/favorites/create' method='POST'>
                <input type='hidden' name='name' value='${name}' >
                <input type='hidden' name='address' value='${address}' >
                <input type='hidden' name='place_id' value='${place_id}' >
                <input type='hidden' name='rating' value='${rating}' >
                <input type='hidden' name='lat' value='${lat}' >
                <input type='hidden' name='lng' value='${lng}' >
                ${text}
              </form>
          <hr>
          </div>
          `
    document.getElementById('list-markets').innerHTML = results;
  }

  let resultRefresh = '';
  function listAllNewLocation(name, address, place_id, rating, lat, lng, image) {
          let favoritesArray = JSON.parse(document.getElementById('favoritesArray').value);
 
          let text = `<button type='submit' class="submit btn-fav">Add to favorites</button>`
          //filter if favorite
          for(let i = 0; i<favoritesArray.length;i++) {
            if (favoritesArray[i].id === place_id) {
              text = `<div class="fav-switch" style="margin: 0px 17%;">Already a favorite! <img style="width:15px;" src="images/favicon.png"></div>`
              break;
            }
          }
          results+= `
          <div class="each">
          <div class="market-info" id="market-info">
              <span class="market-image"><img src="${image}" /></span>
              <div class="market-des">
              <div id='${place_id}' class="market-name">Market: ${name}</div>
              <div class="market-address">Address: ${address}</div>
              <div class="market-rating">Rating: ${rating}/5</div>
              
              
              </div>
              
          </div>
          <form action='/favorites/create' method='POST'>
                <input type='hidden' name='name' value='${name}' >
                <input type='hidden' name='address' value='${address}' >
                <input type='hidden' name='place_id' value='${place_id}' >
                <input type='hidden' name='rating' value='${rating}' >
                <input type='hidden' name='lat' value='${lat}' >
                <input type='hidden' name='lng' value='${lng}' >
                ${text}
              </form>
          <hr>
          </div>
          `
    document.getElementById('list-markets').innerHTML = resultRefresh;
  }

  let divClear;
  function clearDivs() {
    divClear = ``;
    document.getElementById('list-markets').innerHTML = divClear;
  }

  
//CALC ROUTE

/*Get directions activates getdirection();
  let directionsService;
  let directionsRenderer;

function initialize() {
    directionsService = new google.maps.DirectionsService();
    directionsRenderer = new google.maps.DirectionsRenderer();
} */
 
  function calcRoute(lat, lng) {
    //initialize();
    let directionsService = new google.maps.DirectionsService();
    let directionsRenderer = new google.maps.DirectionsRenderer();
    getCurrentLocation(lat, lng) ;

    function getCurrentLocation(lat, lng) {
      navigator.geolocation.getCurrentPosition((position) => {
        const pos = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        }
        let start = pos;
        let end = { lat, lng };
        let request = {
          origin: start,
          destination: end,
          travelMode: 'WALKING'
        };

        directionsService.route(request, (result, status) => {
          if (status === 'OK') {
            directionsRenderer.setDirections(result);
          }
        });
      directionsRenderer.setMap(map);
      })
    }
  }

       /* function clearRoute() {
          // Clear past routes
        directionsRenderer.setMap(null)
        } */


//FAVS FROM BACKEND // ALT WAY WITH AXIOS
let dbResults
let myFavorites = '';
function listAllFavorites() {
   //console.log(directionsRenderer);
   //if (!directionsRenderer) {
   //clearRoute(); }
   
   let listDiv = document.getElementById('list-markets');
   listDiv.innerHTML = '';
   document.getElementById('fav-list-header').innerHTML = 'My Favorites';
   
   getFavorites()
   .then(() => {

    clearMarkers();
    dbResults.forEach((favorite) => {
      if (favorite.lat) {
        setMarker({ lat: favorite.lat, lng: favorite.lng },
          favorite.name,
          favorite.address,
          favorite.id,
          0,
          favorite.lat,
          favorite.lng);
      }
     
      myFavorites += `
                <div class="each">
                <div class="align-favs">
                <div class="market-name">Market Name: ${favorite.name}</div>
                <div class="market-address">Address: ${favorite.address}</div>
                <!-- we can only have post requests on forms -->
                <form action="/profile/${favorite._id}/delete" method="POST">
                  <button class="submit btn-fav" type="submit">Remove Favorite</button>
                </form>
              </div>
              <hr>
              </div>
              `
          
    })

    listDiv.innerHTML = myFavorites;
  })   
}

let list1 = document.getElementById('fav-market');
function hideList() {
  if (list1.style.display === 'block') {
    list1.style.display = 'none'
  }
}

    //CALL TO BACKEND 
function getFavorites() {
  return axios
    .get('/profile/favorites')
    .then((resultFromDB) => {
      dbResults = resultFromDB.data.favorites;
    })
}

function clearMarkers() {
  firstMarkers.forEach((marker) => {
    marker.setMap(null);
  });
}
  

// CURRENT LOCATION
    function getCurrentLocation() {
      navigator.geolocation.getCurrentPosition((position) => {
        const pos = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        }
        map.setCenter(pos);
        map.setZoom(15);
        clearMarkers();
        searchPlaces();
        function searchPlaces() {
            let request = {
              location: pos,
              query: ['market', 'bio']
            }
          let service = new google.maps.places.PlacesService(map);
          service.textSearch(request, (results, status) => {
            if (status === google.maps.places.PlacesServiceStatus.OK) {
              for (let i = 0; i < results.length; i++) {
                
                let data = results;
                let name = results[i].name;
                let image = (results[i].photos !== undefined) ?
                        (results[i].photos[0].getUrl({'maxWidth': 100, 'maxHeight': 100})) :
                        '/images/losticon.png';
                let address = results[i].formatted_address;
                let place_id = results[i].place_id;
                let rating = results[i].rating;
                let lat = results[i].geometry.location.lat();
                let lng = results[i].geometry.location.lng();
                setMarker({ lat, lng }, name, address, place_id, rating, lat, lng);
                listAllNewLocation(name, address, place_id, rating, lat, lng, image);
              }
            }
          })
        }
      })
    }

  //let userSearch = ;
    function searchLocation() {
      clearDivs();
      clearMarkers();
      let keyword = document.getElementById('customLocation').value
      const geocoder = new google.maps.Geocoder();
      geocoder.geocode({ 'address': keyword}, (results, status) => {
        if (status == google.maps.GeocoderStatus.OK) {
          let lat = results[0].geometry.location.lat();
          let lng = results[0].geometry.location.lng();
          searchPlaces({ lat, lng});
          function searchPlaces(keyword) {
 
     // let savedLocation = JSON.parse(document.getElementById('storeLocationInput').value);
      let request = {
        location: keyword,
        query: ['market', 'bio']

      }
      let service = new google.maps.places.PlacesService(map);
      service.textSearch(request, (results, status) => {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          for (let i = 0; i < results.length; i++) {
            let data = results;
            let name = results[i].name;
            let image = (results[i].photos !== undefined) ?
                        (results[i].photos[0].getUrl({'maxWidth': 100, 'maxHeight': 100})) :
                        '/images/losticon.png';
            let address = results[i].formatted_address;
            let place_id = results[i].place_id;
            let rating = results[i].rating;
           let lat = results[i].geometry.location.lat();
           let lng = results[i].geometry.location.lng();
            setMarker({ lat, lng }, name, address, place_id, rating, lat, lng);
            listAllNewLocation(name, address, place_id, rating, lat, lng, image);
          }
        }
      });
    }
          map.setCenter({ lat, lng});
        } 
      });

    }
  

if (showOnlyFavorites) {
  listAllFavorites();
}
</script>
